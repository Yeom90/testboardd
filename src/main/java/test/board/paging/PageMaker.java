package test.board.paging;import org.springframework.web.util.UriComponents;import org.springframework.web.util.UriComponentsBuilder;import test.board.searching.SearchCriteria;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;public class PageMaker {    private int totalCount; // 전체 게시글 개수    private int startPage; //시작페이지 번호    private int endPage; //끝 페이지 번호    private boolean prev; //이전 페이지 분기    private boolean next; //다음 페이지 분기    private int displayPageNum = 10; // 하단 페이지 번호(1~10)    public int getStartPage() {        return startPage;    }    public int getTotalCount() {        return totalCount;    }    public int getEndPage() {        return endPage;    }    public void setEndPage(int endPage) {        this.endPage = endPage;    }    public boolean isPrev() {        return prev;    }    public void setPrev(boolean prev) {        this.prev = prev;    }    public boolean isNext() {        return next;    }    public void setNext(boolean next) {        this.next = next;    }    public int getDisplayPageNum() {        return displayPageNum;    }    public void setDisplayPageNum(int displayPageNum) {        this.displayPageNum = displayPageNum;    }    public Criteria getCriteria() {        return criteria;    }    public void setStartPage(int startPage) {        this.startPage = startPage;    }    private Criteria criteria;    public void setCriteria(Criteria criteria){        this.criteria = criteria;    }    public void setTotalCount(int totalCount){        this.totalCount = totalCount;        calcData();    }    //게시글의 전체 개수가 설정되는 시점에 calcData() 메서드를 호출하여 계산한다.    public void calcData(){        //끝 페이지 번호 = Math.ceil(현재페이지 / 페이지 번호의 갯수) * 페이지 번호의 갯수        endPage = (int)(Math.ceil(criteria.getPage() / (double) displayPageNum) * displayPageNum);        //시작페이지 번호 = (끝 페이지 번호 - 페이지 번호의 갯수) + 1        startPage = (endPage - displayPageNum) + 1;        // 100개의 게시글을 20개씩 보여줄 경우 끝 페이지 번호는 5여야 하는데, 20 = Math.ceil(1/20)*20; 으로 결과값이 20이 나온다.        // 계산식의 결과 값을 보정하기 위해 또 다른 계산식이 필요하다.        //끝 페이지 번호 보정 계산식        //끝 페이지 번호 = Math.ceil(전체 게시글 갯수 / 페이지 당 출력할 게시글의 갯수), 5 = Math.ceil(100/20);        int tempEndPage = (int)(Math.ceil(totalCount / (double)criteria.getPerPageNum()));        //이전의 결과 값과 보전된 결과 값을 비교 후, 보정한 결과 값을 페이지 끝 번호 필드에 저장.        if(endPage > tempEndPage){            endPage = tempEndPage;        }        //이전 링크의 경우 시작 페이지 번호가 1인지 아닌지만 검사하면 된다, 삼항 연산자를 통해 1이면 false, 아니면 true 값을 가지도록 하면 된다.        prev = startPage == 1 ? false : true;        //다음링크의 경우 페이지당 출력할 페이지 번호의 개수가 10이고, 끝페이지가 10인 상황에서 전체 게시글의 수가 101이라면 다음 링크는 true 가 되야한다.        // 다음링크 = 끝페이지 * 페이지당 출력할 게시글의 개수 >= 전체 게시글의 개수 ? : false : true;        // true = 10 * 10 >= 101 ? false : true;        next = endPage * criteria.getPerPageNum() >= totalCount ? false : true;    }    //URI 자동생성 메서드    public String makeSearch(int page){        UriComponents uriComponents = UriComponentsBuilder.newInstance() //TODO: UriComponents 오브젝트 검색                .queryParam("page", page)                .queryParam("ftSearchType", ((SearchCriteria)criteria).getFtSearchType())                .queryParam("sdSearchType", ((SearchCriteria)criteria).getSdSearchType())                .queryParam("keyword", encoding(((SearchCriteria)criteria).getKeyword()))                .build();        return uriComponents.toUriString();    }    // 검색 키워드 UTF-8로 인코딩 하는 함수    private String encoding(String keyword){        if(keyword == null || keyword.trim().length() == 0){ //keyword 값이 공백제거하고 길이가 0일경우나 null 일 경우 //trim(): 공백제거 함수            return "";        }        try{            return URLEncoder.encode(keyword, "UTF-8"); //TODO: URLEncoder 오브젝트 검색        }catch (UnsupportedEncodingException e){            return "";        }    }}